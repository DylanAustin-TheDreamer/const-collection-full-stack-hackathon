# Generated by Django 4.2.24 on 2025-10-16 12:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('collections_app', '0002_artwork'),
    ]

    operations = [
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the basket was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the basket was last modified')),
                ('user', models.OneToOneField(help_text='The user who owns this basket', on_delete=django.db.models.deletion.CASCADE, related_name='basket', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Basket',
                'verbose_name_plural': 'Baskets',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(editable=False, help_text='Unique order reference number', max_length=32, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', help_text='Current status of the order', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total order amount', max_digits=10)),
                ('payment_method', models.CharField(default='stripe', help_text='Payment method used (e.g., stripe, paypal)', max_length=50)),
                ('stripe_payment_intent', models.CharField(blank=True, help_text='Stripe payment intent ID', max_length=255, null=True)),
                ('email', models.EmailField(help_text='Customer email address', max_length=254)),
                ('full_name', models.CharField(help_text='Customer full name', max_length=200)),
                ('address_line1', models.CharField(help_text='Address line 1', max_length=255)),
                ('address_line2', models.CharField(blank=True, help_text='Address line 2 (optional)', max_length=255)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal/ZIP code', max_length=20)),
                ('country', models.CharField(help_text='Country', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the order was placed')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the order was last updated')),
                ('user', models.ForeignKey(help_text='User who placed this order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artwork_title', models.CharField(help_text='Title of the artwork at time of purchase', max_length=200)),
                ('artwork_artist', models.CharField(help_text='Artist name at time of purchase', max_length=200)),
                ('artwork_medium', models.CharField(blank=True, help_text='Medium at time of purchase', max_length=200)),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Quantity purchased', validators=[django.core.validators.MinValueValidator(1)])),
                ('price', models.DecimalField(decimal_places=2, help_text='Price at time of purchase', max_digits=10)),
                ('artwork', models.ForeignKey(help_text='The artwork purchased', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_items', to='collections_app.artwork')),
                ('order', models.ForeignKey(help_text='The order containing this item', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='collections_app.order')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
            },
        ),
        migrations.CreateModel(
            name='BasketItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Number of items (usually 1 for original artworks)', validators=[django.core.validators.MinValueValidator(1)])),
                ('price_at_addition', models.DecimalField(decimal_places=2, help_text='Price of the artwork when added to basket', max_digits=10)),
                ('added_at', models.DateTimeField(auto_now_add=True, help_text='When this item was added to the basket')),
                ('artwork', models.ForeignKey(help_text='The artwork in this basket item', on_delete=django.db.models.deletion.CASCADE, related_name='basket_items', to='collections_app.artwork')),
                ('basket', models.ForeignKey(help_text='The basket containing this item', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='collections_app.basket')),
            ],
            options={
                'verbose_name': 'Basket Item',
                'verbose_name_plural': 'Basket Items',
                'ordering': ['-added_at'],
                'unique_together': {('basket', 'artwork')},
            },
        ),
    ]
