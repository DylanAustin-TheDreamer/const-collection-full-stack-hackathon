"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os    # Val added 
import sys
import dj_database_url
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add the repository root to Python path so apps at the project root
# (for example `collections_app`) can be imported and so we can import
# the repo-level `env.py` helper.
REPO_ROOT = BASE_DIR
if str(REPO_ROOT) not in sys.path:
    sys.path.insert(0, str(REPO_ROOT))

# Import env.py from repo root if it exists
env_path = REPO_ROOT / "env.py"
if env_path.exists():
    import env  # noqa
    # Defensive: if env.py did not populate DATABASE_URL (or other vars),
    # execute it directly to ensure os.environ is set. This handles cases
    # where import caching or package paths prevent the simple import from
    # running the file as expected.
    try:
        # runpy is safe here â€” it executes the file in a fresh namespace
        # and will set os.environ as env.py intends.
        import runpy
        if not os.environ.get('DATABASE_URL'):
            runpy.run_path(str(env_path), run_name='__env_fallback__')
    except Exception:
        # Keep behavior unchanged on failure; let settings code raise any
        # clear errors later when DATABASE_URL is used.
        pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['localhost', 'herokuapp.com', '127.0.0.1', 'const-collection-0f06bd9d4705.herokuapp.com']
CSRF_TRUSTED_ORIGINS = ['https://*.herokuapp.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_summernote',
    'cloudinary',
    'crispy_forms',
    'crispy_bootstrap5',
    'collections_app',
    'events_app',
    'store_app',
    'owner_app',
]

SITE_ID = 1  # Required by allauth
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    # 'config.middleware.MediaCacheMiddleware',  # Custom media cache headers
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    # 'config.middleware.SecurityHeadersMiddleware',

]

# Security Headers - Improve Best Practices Score
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Read and sanitize DATABASE_URL from environment to tolerate a few
# common mis-formattings (for example when a bytes repr or extra quotes
# were accidentally stored). We keep Postgres as the required DB.
_raw_db = os.environ.get('DATABASE_URL')
if isinstance(_raw_db, (bytes, bytearray)):
    _raw_db = _raw_db.decode('utf-8', errors='ignore')
if isinstance(_raw_db, str):
    _raw_db = _raw_db.strip()
    if _raw_db.startswith("b'") or _raw_db.startswith('b"'):
        # remove leading b' and trailing quote from reprs
        _raw_db = _raw_db[2:]
    # strip surrounding quotes
    _raw_db = _raw_db.strip('"\'')

if not _raw_db:
    raise RuntimeError(
        'DATABASE_URL environment variable is not set. Please set it to a valid '
        'Postgres URL (e.g. postgresql://user:pass@host:port/dbname)'
    )

try:
    DATABASES = {'default': dj_database_url.parse(_raw_db)}
except Exception as exc:
    raise RuntimeError(f"Unable to parse DATABASE_URL={_raw_db!r}: {exc}") from exc


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]

# Django Allauth settings for better user experience
ACCOUNT_SESSION_REMEMBER = True  # Show "Remember Me" checkbox
# Auto login after email confirmation
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True  # Auto login after password reset
# Don't logout when changing password
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False

# Session settings for "Remember Me" functionality
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds (14 * 24 * 60 * 60)
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Don't expire when browser closes
SESSION_SAVE_EVERY_REQUEST = True  # Refresh session on every request

# Cookie Security Settings - Improve Best Practices Score
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookies
SESSION_COOKIE_SAMESITE = 'Lax'  # Prevent CSRF attacks
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_HTTPONLY = True  # Prevent JavaScript access to CSRF cookies
CSRF_COOKIE_SAMESITE = 'Lax'  # Prevent CSRF attacks

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration for efficient static file caching
# This significantly improves repeat visit performance
WHITENOISE_USE_FINDERS = True  # Use Django's staticfiles finders
WHITENOISE_AUTOREFRESH = True  # Auto-refresh static files in development

# Cache static files for 1 year (31536000 seconds) for maximum efficiency
# These files have cache-busting via Django's collectstatic versioning
WHITENOISE_MAX_AGE = 31536000  # 1 year cache for static files

# Configure different cache times for different file types
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = [
    'jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz',
    'bz2', 'tbz', 'xz', 'br'
]

# Enable static file compression for better transfer efficiency
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Media files (user uploads like images)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Cloudinary Configuration
if 'CLOUDINARY_URL' in os.environ:
    # Use the CLOUDINARY_URL if available (most common format)
    cloudinary.config()
    # Explicitly set the config as backup
    cloudinary.config(
        cloud_name='dece3gnhm',
        api_key='832681451742447',
        api_secret='1XTFspXWu98Gs8G7YtAUNmAVC6U',
        secure=True,
    )
else:
    # Fallback to individual environment variables
    cloudinary.config(
        cloud_name=os.environ.get('CLOUDINARY_CLOUD_NAME'),
        api_key=os.environ.get('CLOUDINARY_API_KEY'),
        api_secret=os.environ.get('CLOUDINARY_API_SECRET'),
        secure=True,  # Always use HTTPS
    )

import os

# Cloudinary credentials from env
CLOUDINARY = {
    'cloud_name': os.getenv("dece3gnhm"),
    'api_secret': os.getenv("pineappleJuiceis...mkay"),
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
MEDIA_URL = '/media/'  # Django won't serve these in production; Cloudinary URLs will be returned for uploaded files

# ============================================================================
# STRIPE PAYMENT CONFIGURATION
# ============================================================================

# Stripe API keys - get from https://dashboard.stripe.com/apikeys
# For development, use test keys (start with pk_test_ and sk_test_)
# For production, use live keys (start with pk_live_ and sk_live_)

# Public key (used in client-side JavaScript)
STRIPE_PUBLIC_KEY = os.environ.get(
    'STRIPE_PUBLIC_KEY', 
    'pk_test_YOUR_TEST_PUBLIC_KEY_HERE'  # Replace with your test key
)

# Secret key (used in server-side code, never expose to client)
STRIPE_SECRET_KEY = os.environ.get(
    'STRIPE_SECRET_KEY', 
    'sk_test_YOUR_TEST_SECRET_KEY_HERE'  # Replace with your test key
)

# Webhook secret for verifying webhook signatures
STRIPE_WEBHOOK_SECRET = os.environ.get(
    'STRIPE_WEBHOOK_SECRET', 
    'whsec_YOUR_WEBHOOK_SECRET_HERE'  # Replace with your webhook secret
)

# Stripe API version (optional, uses Stripe's default if not set)
STRIPE_API_VERSION = '2024-11-20.acacia'

# Currency for payments (ISO 4217 code)
STRIPE_CURRENCY = 'usd'

# Enable Stripe payment logging for debugging
STRIPE_LOGGING_ENABLED = DEBUG

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
